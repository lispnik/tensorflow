
;;;;    graph.lisp

;;; Generated by the protocol buffer compiler.  DO NOT EDIT!


(cl:in-package #:common-lisp-user)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package '#:tensorflow.protobuf)
    (make-package '#:tensorflow.protobuf :use nil)))
(in-package #:tensorflow.protobuf)
(cl:declaim #.com.google.base:*optimize-default*)

(cl:defclass graph-def (pb:protocol-buffer)
  (
  (node
   :accessor node
   :initform (cl:make-array
              0
              :element-type 'tensorflow.protobuf::node-def
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector tensorflow.protobuf::node-def))
  (versions
   :writer (cl:setf versions)
   :initform cl:nil
   :type (cl:or cl:null tensorflow.protobuf::version-def))
  (version
   :accessor version
   :initform 0
   :type (cl:signed-byte 32))
  (library
   :writer (cl:setf library)
   :initform cl:nil
   :type (cl:or cl:null tensorflow.protobuf::function-def-library))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 4))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'graph-def)

(cl:export 'node)

(cl:unless (cl:fboundp 'clear-node)
  (cl:defgeneric clear-node (proto)))
(cl:defmethod clear-node ((self graph-def))
  (cl:setf (cl:slot-value self 'node)
           (cl:make-array 0 :element-type 'tensorflow.protobuf::node-def
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-node)

(cl:export 'versions)

(cl:unless (cl:fboundp 'versions)
  (cl:defgeneric versions (proto)))
(cl:defmethod versions ((self graph-def))
  (cl:let ((result (cl:slot-value self 'versions)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'tensorflow.protobuf::version-def))
      (cl:setf (cl:slot-value self 'versions) result))
      (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf versions) :after (x (self graph-def))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-versions)
  (cl:defgeneric has-versions (proto)))
(cl:defmethod has-versions ((self graph-def))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-versions)

(cl:unless (cl:fboundp 'clear-versions)
  (cl:defgeneric clear-versions (proto)))
(cl:defmethod clear-versions ((self graph-def))
  (cl:setf (cl:slot-value self 'versions) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-versions)

(cl:export 'version)


(cl:defmethod (cl:setf version) :after (x (self graph-def))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-version)
  (cl:defgeneric has-version (proto)))
(cl:defmethod has-version ((self graph-def))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-version)

(cl:unless (cl:fboundp 'clear-version)
  (cl:defgeneric clear-version (proto)))
(cl:defmethod clear-version ((self graph-def))
  (cl:setf (cl:slot-value self 'version) 0)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-version)

(cl:export 'library)

(cl:unless (cl:fboundp 'library)
  (cl:defgeneric library (proto)))
(cl:defmethod library ((self graph-def))
  (cl:let ((result (cl:slot-value self 'library)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'tensorflow.protobuf::function-def-library))
      (cl:setf (cl:slot-value self 'library) result))
      (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf library) :after (x (self graph-def))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-library)
  (cl:defgeneric has-library (proto)))
(cl:defmethod has-library ((self graph-def))
  (cl:logbitp 3 (cl:slot-value self '%has-bits%)))
(cl:export 'has-library)

(cl:unless (cl:fboundp 'clear-library)
  (cl:defgeneric clear-library (proto)))
(cl:defmethod clear-library ((self graph-def))
  (cl:setf (cl:slot-value self 'library) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-library)


(cl:defmethod cl:print-object ((self graph-def) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:format stream " ~_node: ~s" (node self))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_versions: ~s" (versions self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_version: ~s" (version self)))
      (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_library: ~s" (library self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self graph-def))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'versions) cl:nil))
  (cl:setf (cl:slot-value self 'version) 0)
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'library) cl:nil))
  (cl:setf (cl:slot-value self 'node)
           (cl:make-array 0 :element-type 'tensorflow.protobuf::node-def
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self graph-def))
  cl:t)

(cl:defmethod pb:octet-size ((self graph-def))
  (cl:let ((size 0))
    ;; .tensorflow.protobuf.VersionDef versions = 4[json_name = "versions"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'versions))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; int32 version = 3[json_name = "version", deprecated = true];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'version))))))
    ;; .tensorflow.protobuf.FunctionDefLibrary library = 2[json_name = "library"];
    (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'library))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; repeated .tensorflow.protobuf.NodeDef node = 1[json_name = "node"];
    (cl:let* ((v (cl:slot-value self 'node))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self graph-def) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; repeated .tensorflow.protobuf.NodeDef node = 1[json_name = "node"];
  (cl:let* ((v (cl:slot-value self 'node))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; .tensorflow.protobuf.FunctionDefLibrary library = 2[json_name = "library"];
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'library) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'library) buffer index limit)))
  ;; int32 version = 3[json_name = "version", deprecated = true];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 24))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'version)))))
  ;; .tensorflow.protobuf.VersionDef versions = 4[json_name = "versions"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 34))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'versions) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'versions) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self graph-def) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; repeated .tensorflow.protobuf.NodeDef node = 1[json_name = "node"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'tensorflow.protobuf::node-def)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'node)))))
        ;; .tensorflow.protobuf.FunctionDefLibrary library = 2[json_name = "library"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'library)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'tensorflow.protobuf::function-def-library))
                (cl:setf (cl:slot-value self 'library) message)
                (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; int32 version = 3[json_name = "version", deprecated = true];
        ((24)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'version) value)
            (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; .tensorflow.protobuf.VersionDef versions = 4[json_name = "versions"];
        ((34)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'versions)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'tensorflow.protobuf::version-def))
                (cl:setf (cl:slot-value self 'versions) message)
                (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self graph-def) (from graph-def))
  (cl:let* ((v (cl:slot-value self 'node))
            (vf (cl:slot-value from 'node))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'versions)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'tensorflow.protobuf::version-def))
        (cl:setf (cl:slot-value self 'versions) message)
        (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'versions))))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'version) (cl:slot-value from 'version))
    (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 3 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'library)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'tensorflow.protobuf::function-def-library))
        (cl:setf (cl:slot-value self 'library) message)
        (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'library))))
)


