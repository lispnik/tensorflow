
;;;;    types.lisp

;;; Generated by the protocol buffer compiler.  DO NOT EDIT!


(cl:in-package #:common-lisp-user)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package '#:tensorflow.protobuf)
    (make-package '#:tensorflow.protobuf :use nil)))
(in-package #:tensorflow.protobuf)
(cl:declaim #.com.google.base:*optimize-default*)

(cl:deftype data-type () '(cl:member 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120))
(cl:export 'data-type)

(cl:defconstant +data-type-dt-invalid+ 0)
(cl:export '+data-type-dt-invalid+)
(cl:defconstant +data-type-dt-float+ 1)
(cl:export '+data-type-dt-float+)
(cl:defconstant +data-type-dt-double+ 2)
(cl:export '+data-type-dt-double+)
(cl:defconstant +data-type-dt-int32+ 3)
(cl:export '+data-type-dt-int32+)
(cl:defconstant +data-type-dt-uint8+ 4)
(cl:export '+data-type-dt-uint8+)
(cl:defconstant +data-type-dt-int16+ 5)
(cl:export '+data-type-dt-int16+)
(cl:defconstant +data-type-dt-int8+ 6)
(cl:export '+data-type-dt-int8+)
(cl:defconstant +data-type-dt-string+ 7)
(cl:export '+data-type-dt-string+)
(cl:defconstant +data-type-dt-complex64+ 8)
(cl:export '+data-type-dt-complex64+)
(cl:defconstant +data-type-dt-int64+ 9)
(cl:export '+data-type-dt-int64+)
(cl:defconstant +data-type-dt-bool+ 10)
(cl:export '+data-type-dt-bool+)
(cl:defconstant +data-type-dt-qint8+ 11)
(cl:export '+data-type-dt-qint8+)
(cl:defconstant +data-type-dt-quint8+ 12)
(cl:export '+data-type-dt-quint8+)
(cl:defconstant +data-type-dt-qint32+ 13)
(cl:export '+data-type-dt-qint32+)
(cl:defconstant +data-type-dt-bfloat16+ 14)
(cl:export '+data-type-dt-bfloat16+)
(cl:defconstant +data-type-dt-qint16+ 15)
(cl:export '+data-type-dt-qint16+)
(cl:defconstant +data-type-dt-quint16+ 16)
(cl:export '+data-type-dt-quint16+)
(cl:defconstant +data-type-dt-uint16+ 17)
(cl:export '+data-type-dt-uint16+)
(cl:defconstant +data-type-dt-complex128+ 18)
(cl:export '+data-type-dt-complex128+)
(cl:defconstant +data-type-dt-half+ 19)
(cl:export '+data-type-dt-half+)
(cl:defconstant +data-type-dt-resource+ 20)
(cl:export '+data-type-dt-resource+)
(cl:defconstant +data-type-dt-float-ref+ 101)
(cl:export '+data-type-dt-float-ref+)
(cl:defconstant +data-type-dt-double-ref+ 102)
(cl:export '+data-type-dt-double-ref+)
(cl:defconstant +data-type-dt-int32-ref+ 103)
(cl:export '+data-type-dt-int32-ref+)
(cl:defconstant +data-type-dt-uint8-ref+ 104)
(cl:export '+data-type-dt-uint8-ref+)
(cl:defconstant +data-type-dt-int16-ref+ 105)
(cl:export '+data-type-dt-int16-ref+)
(cl:defconstant +data-type-dt-int8-ref+ 106)
(cl:export '+data-type-dt-int8-ref+)
(cl:defconstant +data-type-dt-string-ref+ 107)
(cl:export '+data-type-dt-string-ref+)
(cl:defconstant +data-type-dt-complex64-ref+ 108)
(cl:export '+data-type-dt-complex64-ref+)
(cl:defconstant +data-type-dt-int64-ref+ 109)
(cl:export '+data-type-dt-int64-ref+)
(cl:defconstant +data-type-dt-bool-ref+ 110)
(cl:export '+data-type-dt-bool-ref+)
(cl:defconstant +data-type-dt-qint8-ref+ 111)
(cl:export '+data-type-dt-qint8-ref+)
(cl:defconstant +data-type-dt-quint8-ref+ 112)
(cl:export '+data-type-dt-quint8-ref+)
(cl:defconstant +data-type-dt-qint32-ref+ 113)
(cl:export '+data-type-dt-qint32-ref+)
(cl:defconstant +data-type-dt-bfloat16-ref+ 114)
(cl:export '+data-type-dt-bfloat16-ref+)
(cl:defconstant +data-type-dt-qint16-ref+ 115)
(cl:export '+data-type-dt-qint16-ref+)
(cl:defconstant +data-type-dt-quint16-ref+ 116)
(cl:export '+data-type-dt-quint16-ref+)
(cl:defconstant +data-type-dt-uint16-ref+ 117)
(cl:export '+data-type-dt-uint16-ref+)
(cl:defconstant +data-type-dt-complex128-ref+ 118)
(cl:export '+data-type-dt-complex128-ref+)
(cl:defconstant +data-type-dt-half-ref+ 119)
(cl:export '+data-type-dt-half-ref+)
(cl:defconstant +data-type-dt-resource-ref+ 120)
(cl:export '+data-type-dt-resource-ref+)

(cl:defconstant +minimum-data-type+ +data-type-dt-invalid+)
(cl:export '+minimum-data-type+)
(cl:defconstant +maximum-data-type+ +data-type-dt-resource-ref+)
(cl:export '+maximum-data-type+)

