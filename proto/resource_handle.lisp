
;;;;    resource_handle.lisp

;;; Generated by the protocol buffer compiler.  DO NOT EDIT!


(cl:in-package #:common-lisp-user)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package '#:tensorflow.protobuf)
    (make-package '#:tensorflow.protobuf :use nil)))
(in-package #:tensorflow.protobuf)
(cl:declaim #.com.google.base:*optimize-default*)

(cl:defclass resource-handle (pb:protocol-buffer)
  (
  (device
   :accessor device
   :initform (pb:string-field "")
   :type pb::%sf%)
  (container
   :accessor container
   :initform (pb:string-field "")
   :type pb::%sf%)
  (name
   :accessor name
   :initform (pb:string-field "")
   :type pb::%sf%)
  (hash-code
   :accessor hash-code
   :initform 0
   :type (cl:unsigned-byte 64))
  (maybe-type-name
   :accessor maybe-type-name
   :initform (pb:string-field "")
   :type pb::%sf%)
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 5))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'resource-handle)

(cl:export 'device)


(cl:defmethod (cl:setf device) :after (x (self resource-handle))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-device)
  (cl:defgeneric has-device (proto)))
(cl:defmethod has-device ((self resource-handle))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-device)

(cl:unless (cl:fboundp 'clear-device)
  (cl:defgeneric clear-device (proto)))
(cl:defmethod clear-device ((self resource-handle))
  (cl:setf (cl:slot-value self 'device) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-device)

(cl:export 'container)


(cl:defmethod (cl:setf container) :after (x (self resource-handle))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-container)
  (cl:defgeneric has-container (proto)))
(cl:defmethod has-container ((self resource-handle))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-container)

(cl:unless (cl:fboundp 'clear-container)
  (cl:defgeneric clear-container (proto)))
(cl:defmethod clear-container ((self resource-handle))
  (cl:setf (cl:slot-value self 'container) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-container)

(cl:export 'name)


(cl:defmethod (cl:setf name) :after (x (self resource-handle))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-name)
  (cl:defgeneric has-name (proto)))
(cl:defmethod has-name ((self resource-handle))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-name)

(cl:unless (cl:fboundp 'clear-name)
  (cl:defgeneric clear-name (proto)))
(cl:defmethod clear-name ((self resource-handle))
  (cl:setf (cl:slot-value self 'name) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-name)

(cl:export 'hash-code)


(cl:defmethod (cl:setf hash-code) :after (x (self resource-handle))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-hash-code)
  (cl:defgeneric has-hash-code (proto)))
(cl:defmethod has-hash-code ((self resource-handle))
  (cl:logbitp 3 (cl:slot-value self '%has-bits%)))
(cl:export 'has-hash-code)

(cl:unless (cl:fboundp 'clear-hash-code)
  (cl:defgeneric clear-hash-code (proto)))
(cl:defmethod clear-hash-code ((self resource-handle))
  (cl:setf (cl:slot-value self 'hash-code) 0)
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-hash-code)

(cl:export 'maybe-type-name)


(cl:defmethod (cl:setf maybe-type-name) :after (x (self resource-handle))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-maybe-type-name)
  (cl:defgeneric has-maybe-type-name (proto)))
(cl:defmethod has-maybe-type-name ((self resource-handle))
  (cl:logbitp 4 (cl:slot-value self '%has-bits%)))
(cl:export 'has-maybe-type-name)

(cl:unless (cl:fboundp 'clear-maybe-type-name)
  (cl:defgeneric clear-maybe-type-name (proto)))
(cl:defmethod clear-maybe-type-name ((self resource-handle))
  (cl:setf (cl:slot-value self 'maybe-type-name) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-maybe-type-name)


(cl:defmethod cl:print-object ((self resource-handle) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_device: ~s" (device self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_container: ~s" (container self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_name: ~s" (name self)))
      (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_hash-code: ~s" (hash-code self)))
      (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_maybe-type-name: ~s" (maybe-type-name self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self resource-handle))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'device) (pb:string-field "")))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'container) (pb:string-field "")))
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (pb:string-field "")))
  (cl:setf (cl:slot-value self 'hash-code) 0)
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'maybe-type-name) (pb:string-field "")))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self resource-handle))
  cl:t)

(cl:defmethod pb:octet-size ((self resource-handle))
  (cl:let ((size 0))
    ;; string device = 1[json_name = "device"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'device))))
        (cl:+ s (varint:length32 s)))))
    ;; string container = 2[json_name = "container"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'container))))
        (cl:+ s (varint:length32 s)))))
    ;; string name = 3[json_name = "name"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'name))))
        (cl:+ s (varint:length32 s)))))
    ;; uint64 hash_code = 4[json_name = "hashCode"];
    (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:slot-value self 'hash-code)))))
    ;; string maybe_type_name = 5[json_name = "maybeTypeName"];
    (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'maybe-type-name))))
        (cl:+ s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self resource-handle) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; string device = 1[json_name = "device"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'device) 'pb::%octets%))))
  ;; string container = 2[json_name = "container"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'container) 'pb::%octets%))))
  ;; string name = 3[json_name = "name"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 26))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'name) 'pb::%octets%))))
  ;; uint64 hash_code = 4[json_name = "hashCode"];
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 32))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:slot-value self 'hash-code))))
  ;; string maybe_type_name = 5[json_name = "maybeTypeName"];
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 42))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'maybe-type-name) 'pb::%octets%))))
  index)

(cl:defmethod pb:merge-from-array ((self resource-handle) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; string device = 1[json_name = "device"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'device) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; string container = 2[json_name = "container"];
        ((18)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'container) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; string name = 3[json_name = "name"];
        ((26)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'name) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; uint64 hash_code = 4[json_name = "hashCode"];
        ((32)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-uint64-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'hash-code) value)
            (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; string maybe_type_name = 5[json_name = "maybeTypeName"];
        ((42)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'maybe-type-name) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self resource-handle) (from resource-handle))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'device) (cl:slot-value from 'device))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'container) (cl:slot-value from 'container))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (cl:slot-value from 'name))
    (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 3 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'hash-code) (cl:slot-value from 'hash-code))
    (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 4 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'maybe-type-name) (cl:slot-value from 'maybe-type-name))
    (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))
)


