
;;;;    tensor_shape.lisp

;;; Generated by the protocol buffer compiler.  DO NOT EDIT!


(cl:in-package #:common-lisp-user)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package '#:tensorflow.protobuf)
    (make-package '#:tensorflow.protobuf :use nil)))
(in-package #:tensorflow.protobuf)
(cl:declaim #.com.google.base:*optimize-default*)

(cl:defclass tensor-shape-proto-dim (pb:protocol-buffer)
  (
  (size
   :accessor size
   :initform 0
   :type (cl:signed-byte 64))
  (name
   :accessor name
   :initform (pb:string-field "")
   :type pb::%sf%)
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'tensor-shape-proto-dim)

(cl:export 'size)


(cl:defmethod (cl:setf size) :after (x (self tensor-shape-proto-dim))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-size)
  (cl:defgeneric has-size (proto)))
(cl:defmethod has-size ((self tensor-shape-proto-dim))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-size)

(cl:unless (cl:fboundp 'clear-size)
  (cl:defgeneric clear-size (proto)))
(cl:defmethod clear-size ((self tensor-shape-proto-dim))
  (cl:setf (cl:slot-value self 'size) 0)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-size)

(cl:export 'name)


(cl:defmethod (cl:setf name) :after (x (self tensor-shape-proto-dim))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-name)
  (cl:defgeneric has-name (proto)))
(cl:defmethod has-name ((self tensor-shape-proto-dim))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-name)

(cl:unless (cl:fboundp 'clear-name)
  (cl:defgeneric clear-name (proto)))
(cl:defmethod clear-name ((self tensor-shape-proto-dim))
  (cl:setf (cl:slot-value self 'name) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-name)



(cl:defclass tensor-shape-proto (pb:protocol-buffer)
  (
  (dim
   :accessor dim
   :initform (cl:make-array
              0
              :element-type 'tensorflow.protobuf::tensor-shape-proto-dim
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector tensorflow.protobuf::tensor-shape-proto-dim))
  (unknown-rank
   :accessor unknown-rank
   :initform cl:nil
   :type cl:boolean)
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'tensor-shape-proto)

(cl:export 'dim)

(cl:unless (cl:fboundp 'clear-dim)
  (cl:defgeneric clear-dim (proto)))
(cl:defmethod clear-dim ((self tensor-shape-proto))
  (cl:setf (cl:slot-value self 'dim)
           (cl:make-array 0 :element-type 'tensorflow.protobuf::tensor-shape-proto-dim
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-dim)

(cl:export 'unknown-rank)


(cl:defmethod (cl:setf unknown-rank) :after (x (self tensor-shape-proto))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-unknown-rank)
  (cl:defgeneric has-unknown-rank (proto)))
(cl:defmethod has-unknown-rank ((self tensor-shape-proto))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-unknown-rank)

(cl:unless (cl:fboundp 'clear-unknown-rank)
  (cl:defgeneric clear-unknown-rank (proto)))
(cl:defmethod clear-unknown-rank ((self tensor-shape-proto))
  (cl:setf (cl:slot-value self 'unknown-rank) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-unknown-rank)


(cl:defmethod cl:print-object ((self tensor-shape-proto-dim) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_size: ~s" (size self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_name: ~s" (name self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self tensor-shape-proto-dim))
  (cl:setf (cl:slot-value self 'size) 0)
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (pb:string-field "")))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self tensor-shape-proto-dim))
  cl:t)

(cl:defmethod pb:octet-size ((self tensor-shape-proto-dim))
  (cl:let ((size 0))
    ;; int64 size = 1[json_name = "size"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'size))))))
    ;; string name = 2[json_name = "name"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'name))))
        (cl:+ s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self tensor-shape-proto-dim) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; int64 size = 1[json_name = "size"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 8))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'size)))))
  ;; string name = 2[json_name = "name"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'name) 'pb::%octets%))))
  index)

(cl:defmethod pb:merge-from-array ((self tensor-shape-proto-dim) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; int64 size = 1[json_name = "size"];
        ((8)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int64-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'size) value)
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; string name = 2[json_name = "name"];
        ((18)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'name) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self tensor-shape-proto-dim) (from tensor-shape-proto-dim))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'size) (cl:slot-value from 'size))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (cl:slot-value from 'name))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
)



(cl:defmethod cl:print-object ((self tensor-shape-proto) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:format stream " ~_dim: ~s" (dim self))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_unknown-rank: ~s" (unknown-rank self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self tensor-shape-proto))
  (cl:setf (cl:slot-value self 'unknown-rank) cl:nil)
  (cl:setf (cl:slot-value self 'dim)
           (cl:make-array 0 :element-type 'tensorflow.protobuf::tensor-shape-proto-dim
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self tensor-shape-proto))
  cl:t)

(cl:defmethod pb:octet-size ((self tensor-shape-proto))
  (cl:let ((size 0))
    ;; bool unknown_rank = 3[json_name = "unknownRank"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 1)))
    ;; repeated .tensorflow.protobuf.TensorShapeProto.Dim dim = 2[json_name = "dim"];
    (cl:let* ((v (cl:slot-value self 'dim))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self tensor-shape-proto) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; repeated .tensorflow.protobuf.TensorShapeProto.Dim dim = 2[json_name = "dim"];
  (cl:let* ((v (cl:slot-value self 'dim))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; bool unknown_rank = 3[json_name = "unknownRank"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 24))
    (cl:setf index (wire-format:write-boolean-carefully buffer index limit (cl:slot-value self 'unknown-rank))))
  index)

(cl:defmethod pb:merge-from-array ((self tensor-shape-proto) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; repeated .tensorflow.protobuf.TensorShapeProto.Dim dim = 2[json_name = "dim"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'tensorflow.protobuf::tensor-shape-proto-dim)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'dim)))))
        ;; bool unknown_rank = 3[json_name = "unknownRank"];
        ((24)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-boolean-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'unknown-rank) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self tensor-shape-proto) (from tensor-shape-proto))
  (cl:let* ((v (cl:slot-value self 'dim))
            (vf (cl:slot-value from 'dim))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'unknown-rank) (cl:slot-value from 'unknown-rank))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
)


